<problem display_name="Exercise 2" markdown="null" showanswer="correct_or_past_due" weight="0.5">
  <text>
    <p>In this problem, you will implement three classes according to the specification in the template file <a href="/static/container.py">container.py</a>: one <code>Container</code> class, one <code>Stack</code> class (a subclass of <code>Container</code>), and one <code>Queue</code> class (a subclass of <code>Container</code>). </p>
    <p>      Our <code>Container</code> class will initialize an empty list. The two methods we will have are to calculate the size of the list and to add an element. The second method will be inherited by the two subclasses. We now want to create two subclasses of this generic <code>Container</code> class so that we can add more functionality -- the ability to remove elements from the list. </p>
    <p>      A <code>Stack</code> and a <code>Queue</code> will add elements to the list in the same way, but will behave differently when removing an element. 
    </p>
    <p>      A stack is a last in, first out data structure. Think of a stack of pancakes. As you make pancakes, you create a stack of them with older pancakes going on the bottom and newer pancakes on the top.  As you start eating the pancakes, you pick one off the top so you are removing the newest pancake added to the stack. When implementing your <code>Stack</code> class, you will have to think about which end of your list contains the element that has been in the list the shortest amount of time. This is the element you will want to remove and return. </p>
    <p>      A queue is a first in, first out data structure. Think of a store checkout queue. The customer who has been in the line the longest gets the next available cashier. When implementing your <code>Queue</code> class, you will have to think about which end of your list contains the element that has been in the list the longest. This is the element you will want to remove and return. </p>
    <section class="hints">
      <div class="collapsible">
        <header>
          <a href="#" id="id71">container.py</a>
        </header>
        <section id="id71">
          <pre>class Container(object):
    '''
    A container object is a list and can store elements of any type 
    '''
    def __init__(self):
        '''
        Initializes an empty list
        '''
        self.myList = []

    def size(self):
        '''
        Returns the length of the container list
        '''
        # Your code here

    def add(self, elem):
        '''
        Adds the elem to one end of the container list, keeping the end
        you add to consistent. Does not return anything
        '''
        # Your code here

class Stack(Container):
    '''
    A subclass of Container. Has an additional method to remove elements.
    '''
    def remove(self):
        '''
        The newest element in the container list is removed
        Returns the element removed or None if the queue contains no elements
        '''
        # Your code here

class Queue(Container):
    '''
    A subclass of Container. Has an additional method to remove elements.
    '''
    def remove(self):
        '''
        The oldest element in the container list is removed
        Returns the element removed or None if the stack contains no elements
        '''
        # Your code here

</pre>
        </section>
      </div>
    </section>
    <br/>
    <section class="hints">
      <div class="collapsible">
        <header>
          <a href="#" id="id71">Hints for approaching this problem:</a>
        </header>
        <section id="id71">
          <p>The code for each of these methods should not be more than a couple of lines. If you are unsure how to begin, start by implementing the method <code>add</code> in the <code>Container</code> class, assuming that you add a new item to the end of the end of the list. </p>
          <br/>
          <p>Now, in the method <code>remove</code> in the <code>Stack</code> class, you can remove the newest element as  the one at the highest index in the list. Similarly, in the method <code>remove</code> in the <code>Queue</code> class, you will remove the oldest element as the one at the lowest index in the list. </p>
          <br/>
          <p>You may find the <code>pop</code> method on lists from the <a href="https://docs.python.org/3/tutorial/datastructures.html" target="_blank">Python docs here</a> helpful.</p>
        </section>
      </div>
    </section>
    <br/>
  </text>
  <coderesponse queuename="Watcher-MITx-6.0001r">
    <textbox rows="10" cols="80" mode="python" tabsize="4"/>
    <codeparam>
      <initial_display># Paste your Container, Stack, and Queue classes here
          </initial_display>
      <answer_display>
class Container(object):
    def __init__(self):
        self.myList = []

    def size(self):
        return len(self.myList)

    def add(self, elem):
        self.myList.append(elem)

class Stack(Container):
    def remove(self):
        if self.size() &gt; 0:
            return self.myList.pop()
        return None

class Queue(Container):
    def remove(self):
        if self.size() &gt; 0:
            return self.myList.pop(0)
        return None
</answer_display>
      <grader_payload>
        {"grader": "finger_exercises/L11/container/grade_container.py"}
</grader_payload>
    </codeparam>
  </coderesponse>
</problem>
