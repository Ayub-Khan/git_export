{
  "start": [
    820, 
    3210, 
    6610, 
    8260, 
    11050, 
    14850, 
    19960, 
    23790, 
    25730, 
    29580, 
    34090, 
    37800, 
    41940, 
    46330, 
    49770, 
    51975, 
    54380, 
    58000, 
    62390, 
    65680, 
    68320, 
    71820, 
    75800, 
    81040, 
    85130, 
    89100, 
    92410, 
    95280, 
    99440, 
    103920, 
    110620, 
    112460, 
    116410, 
    120460, 
    122950, 
    126660, 
    128830, 
    131460, 
    136650, 
    143090, 
    147530, 
    150440, 
    151800, 
    156070, 
    158540, 
    163270, 
    166920, 
    170710, 
    172920, 
    175910, 
    180480, 
    182090, 
    186570, 
    189752, 
    191570, 
    195290, 
    199810, 
    206080, 
    208410, 
    213120, 
    215280, 
    218130, 
    221790, 
    224400, 
    227010, 
    231150, 
    234350, 
    239150, 
    243240, 
    244510, 
    248880, 
    250790, 
    255720, 
    258279, 
    262590, 
    268160, 
    272290, 
    274830, 
    276370, 
    279010, 
    281720, 
    284450, 
    286500, 
    290730, 
    294490, 
    298910, 
    301080, 
    306990, 
    311750, 
    313590, 
    317740, 
    322200, 
    324100, 
    328680, 
    335470, 
    338360, 
    341270, 
    346550, 
    349810, 
    353170, 
    358570, 
    365260, 
    368300, 
    373080, 
    379870, 
    386680, 
    389530, 
    393730, 
    397830
  ], 
  "end": [
    3210, 
    6610, 
    8260, 
    11050, 
    14850, 
    19960, 
    23790, 
    25730, 
    29580, 
    34090, 
    37800, 
    41940, 
    46330, 
    49770, 
    51975, 
    54380, 
    58000, 
    62390, 
    65680, 
    68320, 
    71820, 
    75800, 
    81040, 
    85130, 
    89100, 
    92410, 
    95280, 
    99440, 
    103920, 
    110620, 
    112460, 
    116410, 
    120460, 
    122950, 
    126660, 
    128830, 
    131460, 
    136650, 
    143090, 
    147530, 
    150440, 
    151800, 
    156070, 
    158540, 
    163270, 
    166920, 
    170710, 
    172920, 
    175910, 
    180480, 
    182090, 
    186570, 
    189752, 
    191570, 
    195290, 
    199810, 
    206080, 
    208410, 
    213120, 
    215280, 
    218130, 
    221790, 
    224400, 
    227010, 
    231150, 
    234350, 
    239150, 
    243240, 
    244510, 
    248880, 
    250790, 
    255720, 
    258279, 
    262590, 
    268160, 
    272290, 
    274830, 
    276370, 
    279010, 
    281720, 
    284450, 
    286500, 
    290730, 
    294490, 
    298910, 
    301080, 
    306990, 
    311750, 
    313590, 
    317740, 
    322200, 
    324100, 
    328680, 
    335470, 
    338360, 
    341270, 
    346550, 
    349810, 
    353170, 
    358570, 
    365260, 
    368300, 
    373080, 
    379870, 
    386680, 
    389530, 
    393730, 
    397830, 
    400910
  ], 
  "text": [
    "JOHN GUTTAG: Hello, it's me again.", 
    "In the last segment, we looked at hashing and hash tables by drawing a", 
    "bunch of pictures.", 
    "Now it's time to look at some code.", 
    "The class intDict uses a simple hash function, the same we looked at", 
    "before, modulus, to implement a dictionary with integers as keys.", 
    "I know that's boring because we could just use a list, but it's at least", 
    "easy to understand.", 
    "The basic idea is the same when we looked at in the last segment.", 
    "You represent instances of class intDict by a list of buckets where", 
    "each bucket is a list of key value tuples.", 
    "By making each bucket a list, you will recall, we handle collisions by", 
    "storing all the values that hash to that bucket.", 
    "By the way, there are many other ways to handle collisions, some", 
    "considerably better than using lists.", 
    "But this is probably the simplest mechanism.", 
    "And it works fine if the hash table is big enough, and the hash function", 
    "provides a good enough approximation to a uniform distribution.", 
    "All right, to the code.", 
    "So we've got class intDict.", 
    "Init does exactly what we looked at in the last segment.", 
    "It takes the number of buckets as an argument, and then creates an empty", 
    "dictionary, and then goes through and adds to each dictionary a bucket,", 
    "which is initialized to be the empty list.", 
    "Exactly what we saw in the picture in the last segment.", 
    "addEntry entry, takes the key and the value.", 
    "It starts by finding the correct bucket.", 
    "It does that by taking the key and then hashing using modulus.", 
    "And it gets the number to take it from self.numBuckets.", 
    "If we go back, we'll see that we saved numBuckets as an attribute of the hash", 
    "table being created.", 
    "Consequently, we can retrieve it here and use it.", 
    "It's then going to go look at the hash bucket, as we did in the last segment,", 
    "until it finds the dictionary key.", 
    "If it does, it updates it and then returns.", 
    "Notice that once it's returned, it's done.", 
    "It never gets to this statement if it returns.", 
    "On the other hand, if it finishes this loop without finding the key, then it", 
    "just adds a new tuple dictKey, dictVal to the dictionary.", 
    "getValue is very similar to addEntry , a little bit simpler.", 
    "Once again, it has to start by finding the bucket, which it", 
    "does the same way.", 
    "Once again, it has to search through the bucket, looking at each element,", 
    "to see if it can match the key.", 
    "If it finds a match, it returns the value associated with that key.", 
    "Otherwise, it didn't find the match, then it returns None.", 
    "I suppose it would have been perhaps better to raise an exception, but I'm", 
    "sure you get the idea.", 
    "Let's now go look at the code window.", 
    "Way down at the bottom I've got one extra method we didn't look at.", 
    "That's the string method.", 
    "And it does nothing interesting, it just provides a way to print it.", 
    "Now let's see what happens if we use it.", 
    "It does nothing very interesting.", 
    "It creates a dictionary with 29 entries.", 
    "And then I'm going to, for i in range 20, that's going to be a number of", 
    "inserts, I'm going to choose a random integer in the range up to 10^5 --", 
    "so quite a large range of numbers.", 
    "That will be my key, and then I'll add that key with i, the i-th", 
    "insertion as the entry.", 
    "Then after we've built it, we want to look at what's in there.", 
    "In order to make it a little easier to see, I'm going to print it bucket by", 
    "bucket so that we can see the buckets.", 
    "But of course, that violates the abstraction barrier.", 
    "I really shouldn't be doing that, in a good program.", 
    "But for pedagogical reasons, it's worth doing.", 
    "So let's run it and see what we get.", 
    "Well, we get 29 buckets which, conveniently, just happens to fit on", 
    "our screen.", 
    "If we look at it, we'll see that some buckets, like the first one here, have", 
    "just one element in them.", 
    "Other buckets have multiple elements because there's been a collision.", 
    "And a lot of the buckets are empty.", 
    "But again, observe, even though the keys can get very large, I don't have", 
    "very many collisions as we're inserting 20 elements into 29 buckets.", 
    "Now let's return to the code for getValue.", 
    "What is it's algorithmic complexity?", 
    "Well, let's look at the simple case.", 
    "If there were no collisions, what would happen?", 
    "We'd go through this loop exactly once.", 
    "And so it would be order one.", 
    "Suppose there's a collision.", 
    "Well, as we saw last time, if there's a collision, it has to go down the", 
    "entire length of the list in the bucket.", 
    "Let's think of the simple case where we got very unlucky, and everything", 
    "hashed to the same bucket.", 
    "Well, if we inserted n elements and each hashed to the same bucket, then", 
    "we would have to do order n trips through this loop to see whether or", 
    "not we had an entry.", 
    "But remember, we decided that our hash function was uniform, or we would", 
    "design it to be uniform, and therefore it's unlikely that everything would", 
    "hash to the same bucket.", 
    "In fact, let's think about what the actual predicted time should be.", 
    "Let's assume that we have k buckets and n insertions.", 
    "And again, let's assume the hash is uniform.", 
    "What is the average length of a bucket?", 
    "It's simply the number of insertions divided by the number of buckets", 
    "This wraps up our brief excursion into hashing.", 
    "There are a small number of things to take away.", 
    "One, and this is probably the most important thing to remember, hash", 
    "tables are really useful, especially if you want to optimize the time", 
    "required to look up keys other than integers.", 
    "If the key is an integer, a list works just fine.", 
    "Two, it's very important, as we've said perhaps too many times for your", 
    "taste, for the hash function to provide a uniform distribution.", 
    "Otherwise, we get too many collisions.", 
    "And finally, a hash table is an example of a data structure that", 
    "allows us to trade time for space.", 
    "By using more space, we can use less time."
  ]
}