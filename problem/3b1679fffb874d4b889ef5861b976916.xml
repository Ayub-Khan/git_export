<problem display_name="Problem 2" markdown="null" showanswer="past_due" weight="1.0">
  <text>
    <p>
      Write a Python function <code>sumList</code> that takes as input a list <code>L</code> and returns a float that is the sum of all of the numbers and strings in <code>L</code> that can be converted to floats.  For example, if <code>L = [1, 2, 'a', '1.5', 3.5]</code>, then <code>sumList(L)</code> returns <code>8.0</code>.  If <code>L</code> contains no numbers, then <code>sumList(L)</code> should raise a <code>ValueError</code>.</p>
    <p>Hint: Before starting the coding you might want to see what happens when you try to convert something like "abc" to a float.</p>
    <pre>
def sumList(L):
    '''
    Assumes: L is a list.
    Effects: returns a float that is the sum of all of the 
             numbers and strs in L that can be converted to
             floats.
             if L contains no numbers, raises ValueError
             For example, sumList([1, 2, 'a', '1.5', 3.5])
             returns 8.0
    '''
    # Your code here
    </pre>
  </text>
  <coderesponse queuename="Watcher-MITx-6.0001r">
    <textbox rows="10" cols="80" mode="python" tabsize="4"/>
    <codeparam>
      <initial_display>
def sumList(L):
    '''
    Assumes: L is a list.
    Effects: returns a float that is the sum of all of the 
             numbers and strs in L that can be converted to
             floats.
             if L contains no numbers, raises ValueError
             For example, sumList([1, 2, 'a', '1.5', 3.5])
             returns 8.0
    '''
    # Your code here        
      </initial_display>
      <answer_display> 
def sumList(L):
    """
    Assumes: L is a list.
    Effects: returns a float that is the sum of all of the 
             numbers and strs in L that can be converted to
             floats.
             if L contains no numbers, raises ValueError
             For example, sumList([1,2,'a', '1.5', 3.5])
             returns 8.0
    """
    res = 0
    hasNum = False
    for e in L:
        try:
            res += float(e)
            hasNum = True
        except:
            pass
    if hasNum:
        return res
    else:
        raise ValueError         
	  </answer_display>
      <grader_payload>
		{"grader": "microquiz/f2017/quiz3/sum_list/grade_sum_list_student.py"}
	  </grader_payload>
    </codeparam>
  </coderesponse>
  <p><b>Note: An L379 or L397 error:</b> means that your code has an infinite loop for some test case. You will receive a zero for this problem if your code has an infinite loop.
  </p>
  <p><b>Note on Score Shown:</b> Your code will ultimately be run on our test cases. Getting "Correct"/green check during the exam does not mean you will get full points. The test cases here ensure you do not have a copy/paste error from your IDE.
  </p>
</problem>
