<problem display_name="Problem 6" markdown="null" max_attempts="10" showanswer="past_due" weight="20.0">
  <text>
    <p>
      <b>
        <font color="red">If you are done the exam, <a href="https://docs.google.com/forms/d/1AdYcxsYphMEOvfNaoZ9_phU6oedIksZQYDTxbl3lCJA/edit?usp=drive_web" target="_blank">click here to checkout</a>. Only checkout once to remove your quiz access. <br/> If you do not checkout you will receive a zero on the exam.</font>
      </b>
    </p>
    <p>
      Implement a function that meets the specifications below. </p>
    <pre>def rewrite(s):
    """
    assumes: s is a string
    returns a new string, in which each character of the
       original string appears sorted by the number of
       occurrences, from most common to least common. 
       E.g., if the most common character occurs 5 times,
       then 5 copies of that character would start the
       returned string, followed by the second most common
       character, etc. In the case of ties, any order is
       acceptable.
    """</pre>
    <p/>
    <p>For example, the following code:<br/>
     <pre>
      test = "this is a test"
      print(rewrite(test))</pre><br/> 
            
      could print a number of correct outputs, including: <br/>
    <pre>tttsss   iihae</pre> or <pre>sssttt   iihae</pre></p>
    <p>Paste your entire function, including the definition, in the box below. Do not leave any debugging print statements.</p>
  </text>
  <coderesponse queuename="Watcher-MITx-6.0001r">
    <textbox rows="30" cols="80" mode="python" tabsize="4"/>
    <codeparam>
      <answer_display>
def rewrite(s):
"""
assumes: s is a string
returns a new string, in which each character of the
   original string appears sorted by the number of
   occurences, from most common to least common. 
   E.g., if the most common character occurs 5 times,
   then 5 copies of that character would start the
   returned string, followed by the second most common
   character, etc.
"""
d = {}
for c in s:
    try:
        d[c] += 1
    except:
        d[c] = 1
biggest = 0
for k in d:
    if d[k] &gt; biggest:
        biggest = d[k]
output = ''
for count in range(biggest, 0, -1):
    for k in d:
        if d[k] == count:
            output += k*count
return output
    </answer_display>
      <grader_payload>
{"grader": "quiz/60001_f2017/rewrite/grade_rewrite_student.py", "hide_output": false}
</grader_payload>
    </codeparam>
  </coderesponse>
  <p><b>Note: An L379 or L397 error:</b> means that your code has an infinite loop for some test case. You will receive a zero for this problem if your code has an infinite loop.
  </p>
  <p><b>Note on Score Shown:</b> Your code will ultimately be run on our test cases. Getting "Correct"/green check during the exam does not mean you will get full points. The test cases here ensures you do not have a copy/paste error from your IDE.
  </p>
</problem>
