{
  "start": [
    1300, 
    3010, 
    5850, 
    10990, 
    14560, 
    18400, 
    23740, 
    27810, 
    31780, 
    35660, 
    39560, 
    41560, 
    44570, 
    48680, 
    52470, 
    57560, 
    61900, 
    63100, 
    67010, 
    70980, 
    76000, 
    80070, 
    84430, 
    90020, 
    95990, 
    97030, 
    99010, 
    103270, 
    105850, 
    108020, 
    112420, 
    113973, 
    117810, 
    122050, 
    127290, 
    132150, 
    135560, 
    140390, 
    144000, 
    147840, 
    151570, 
    154970, 
    156530, 
    157665, 
    160320, 
    162560, 
    163830, 
    171640, 
    177530, 
    183230, 
    184570, 
    189460, 
    193610, 
    197740, 
    202400, 
    208740, 
    213560, 
    216900, 
    225120, 
    227680, 
    230850, 
    234080, 
    236850, 
    241070, 
    244270, 
    248730, 
    251060, 
    253830, 
    256430, 
    266110, 
    270710, 
    274530, 
    277880, 
    284210, 
    292890, 
    297250, 
    299730, 
    303200, 
    309064, 
    318710, 
    323510, 
    328690, 
    330860, 
    334580, 
    337300, 
    343140, 
    346470, 
    348020, 
    351500, 
    353860, 
    357550, 
    359270, 
    365630, 
    370650, 
    373840, 
    377680, 
    383270, 
    384580, 
    389220, 
    392910, 
    396690, 
    401465, 
    405490, 
    410390, 
    416760, 
    421220, 
    422940, 
    425790, 
    432170, 
    443070, 
    449670, 
    458110, 
    462320, 
    465300, 
    471350, 
    478370, 
    479980, 
    484970, 
    486990, 
    490150, 
    494890, 
    495980, 
    498580, 
    500660, 
    502390, 
    506100, 
    512460, 
    518830, 
    520520, 
    526280, 
    527990, 
    534060, 
    539690, 
    546520, 
    552290, 
    553780, 
    558830, 
    561826, 
    569480, 
    571790, 
    576390, 
    579490, 
    584010, 
    587270, 
    588520, 
    592830, 
    596580
  ], 
  "end": [
    3010, 
    5850, 
    10990, 
    14560, 
    18400, 
    23740, 
    27810, 
    31780, 
    35660, 
    39560, 
    41560, 
    44570, 
    48680, 
    52470, 
    57560, 
    61900, 
    63100, 
    67010, 
    70980, 
    76000, 
    80070, 
    84430, 
    90020, 
    95990, 
    97030, 
    99010, 
    103270, 
    105850, 
    108020, 
    112420, 
    113973, 
    117810, 
    122050, 
    127290, 
    132150, 
    135560, 
    140390, 
    144000, 
    147840, 
    151570, 
    154970, 
    156530, 
    157665, 
    160320, 
    162560, 
    163830, 
    171640, 
    177530, 
    183230, 
    184570, 
    189460, 
    193610, 
    197740, 
    202400, 
    208740, 
    213560, 
    216900, 
    225120, 
    227680, 
    230850, 
    234080, 
    236850, 
    241070, 
    244270, 
    248730, 
    251060, 
    253830, 
    256430, 
    266110, 
    270710, 
    274530, 
    277880, 
    284210, 
    292890, 
    297250, 
    299730, 
    303200, 
    309064, 
    318710, 
    323510, 
    325500, 
    330860, 
    334580, 
    337300, 
    343140, 
    346470, 
    348020, 
    351500, 
    353860, 
    355110, 
    359270, 
    365630, 
    370650, 
    373840, 
    377680, 
    383270, 
    384580, 
    389220, 
    392910, 
    396690, 
    401465, 
    405490, 
    406740, 
    416760, 
    421220, 
    422940, 
    425790, 
    432170, 
    438900, 
    449670, 
    454620, 
    462320, 
    465300, 
    471350, 
    478370, 
    479980, 
    484970, 
    486990, 
    490150, 
    494890, 
    495980, 
    498580, 
    500660, 
    502390, 
    506100, 
    512460, 
    518830, 
    520520, 
    526280, 
    527990, 
    534060, 
    539690, 
    546520, 
    552290, 
    553780, 
    558830, 
    561826, 
    569480, 
    571790, 
    576390, 
    579490, 
    584010, 
    587270, 
    588520, 
    592830, 
    596580, 
    597830
  ], 
  "text": [
    "JOHN GUTTAG: Hello again.", 
    "Last time, we introduced the notion of probability.", 
    "Now I want to look at an example of applied probability called hashing.", 
    "The word hash has different connotations to different people.", 
    "Those of us who like to eat might think of corned beef hash.", 
    "I&#39;m told that others think of this plant, but I have no idea what it is.", 
    "But to a computer scientist, the first thing that comes to mind is, or at", 
    "least should be, that hashing is a clever implementation technique.", 
    "It&#39;s how dictionaries are implemented in Python, and it leads to a very", 
    "efficient search method in terms of time, though, as we shall see, it does", 
    "come at a cost in space.", 
    "The basic idea behind a hash table is simple.", 
    "We convert the key to an integer and then use that integer to index into a", 
    "list, which we know can be done in constant time.", 
    "In principle, values of any object can be easily converted to an integer.", 
    "After all, we know that the internal representation of each object is just", 
    "a bunch of bits.", 
    "And any sequence of bits can be viewed as representing an integer.", 
    "So for example, we can look at the code string to int.", 
    "A very simple function, it takes a string as an argument, initializes the", 
    "string called number to the empty string, then, for every character in", 
    "s, it takes the ordinal value of that character.", 
    "In Python, as in most programming languages, characters are stored in", 
    "8-bits at a time, often called a byte, and those bits can then be interpreted", 
    "as a number.", 
    "And that&#39;s what ordinal does.", 
    "Then I&#39;m going to turn that number back into a string so that I can then", 
    "concatenate it to this number.", 
    "And I&#39;ll do that for each character in s.", 
    "Then, when I&#39;m done, I&#39;ll turn that string back into an integer", 
    "and then return it.", 
    "That&#39;s a complicated explanation for a small chunk of code.", 
    "But we can probably see what it does pretty easily if we run it.", 
    "So let&#39;s first just convert the string a to an integer.", 
    "It tells us it will convert it to the index 97, which happens to be the", 
    "Unicode number that represents the string a.", 
    "Suppose we have a longer string, for example, &#39;John is a cool dude&#39;.", 
    "Probably should&#39;ve said, let&#39;s make him a way cool dude.", 
    "Well that&#39;s a pretty long number we&#39;ve got here.", 
    "My guess is, we do not want to create a list for which that number is a", 
    "valid index unless we&#39;re going to be storing a heck of a lot of", 
    "entries in that list.", 
    "And we&#39;re not.", 
    "I mean, that&#39;s absurd.", 
    "We would never want anything that big.", 
    "So we have to do something.", 
    "What we have to do is convert large numbers to smaller numbers.", 
    "So let&#39;s look at a hash function that does that.", 
    "So we&#39;ve got the hash function hash string, very similar to the function", 
    "we just looked at.", 
    "Except, in addition to taking a string as an input, it takes a table size.", 
    "I don&#39;t care what number you give me, but it better not be bigger than 100.", 
    "Then it proceeds as before to build up a number.", 
    "But then, instead of returning that number, it takes the number mod table", 
    "size, therefore guaranteeing that it is no bigger that 100.", 
    "So now, let&#39;s run it on the same two strings we&#39;ve looked at before, a and", 
    "&#39;John is a way cool dude&#39;.", 
    "Now what we see is that a still has an index of 97 because we know that 97", 
    "mod 101 is 97.", 
    "But John has been reduced to that large, unpronounceable", 
    "number, to a mere 51.", 
    "So he too will fit into the table.", 
    "Now let&#39;s look at how we use this idea of a hash function to actually", 
    "implement a data structure.", 
    "So I&#39;m going to assume that we only have 7 entries because that&#39;s all I", 
    "could fit on this page.", 
    "So the first thing we&#39;re going to do is, we&#39;re going to insert, let&#39;s say", 
    "this is a mapping of first names to last names.", 
    "And so the key will be Eric, and the value will be his last name, which is", 
    "Grimson, son of Grim, I guess.", 
    "All right, so the first thing we need to do is, we need to hash Eric.", 
    "So let&#39;s come back over here to the code window.", 
    "And if we hash Eric into a table of size 7, we get an index of 2.", 
    "So 0 1 2 will put Grimson here because when we next look up the key Eric,", 
    "we&#39;ll hash it again, we&#39;ll get to 2, we&#39;ll look it up and say, oh, the", 
    "value is Grimson.", 
    "Well, let&#39;s look at Chris Terman.", 
    "We&#39;ll hash Chris, and while we&#39;re at it, we&#39;ll hash Sarina.", 
    "Well, Chris will get put at index 3 and Sarina will get put at index 5.", 
    "Well, this is all well and good, but there&#39;s a potential problem.", 
    "Let&#39;s add Jill to the table.", 
    "We have a problem.", 
    "When we hash Jill, it also hash to 3.", 
    "And so, well, what do we do?", 
    "We probably can&#39;t put her last name here because now, when we hash Jill,", 
    "how do we know whether it&#39;s a Terman or Smith, or Chris, whether it&#39;s a", 
    "Terman or a Smith.", 
    "We need a slight modification to deal with this problem.", 
    "This problem, by the way, has a name.", 
    "It&#39;s called a collision.", 
    "Why do we have collisions?", 
    "We have collisions because a hash function is a many-to-one mapping.", 
    "The whole point was to take a very large space and map each element in", 
    "that space into a much smaller space.", 
    "Inevitably, if we&#39;re doing that, sooner or later we&#39;re going to have to", 
    "map more than one element from this big space to the same point in the", 
    "smaller space.", 
    "And that is what produces a collision.", 
    "Fortunately, collisions are not that difficult to handle.", 
    "Let&#39;s go back, try a slightly different data structure.", 
    "I&#39;ve made my table a lot skinnier here because instead of putting names in", 
    "it, I&#39;m going to start by initializing each element of the table", 
    "to the empty list.", 
    "Now, when I first hash Eric, I&#39;ll still hash him to this place.", 
    "And this, by the way, is called a bucket, or a hash bucket.", 
    "I get to this bucket.", 
    "I notice there&#39;s nobody in it so far.", 
    "And so I replace this empty list by a list containing a tuple.", 
    "And the tuple is both the key, Eric, and the value, Grimson.", 
    "I&#39;ll then get Chris, and he&#39;ll do the same thing as we come to here.", 
    "And now I&#39;ll get a list with the singleton tuple in it.", 
    "I&#39;ll skip Sarina because you can imagine what happens with Sarina here.", 
    "But now let&#39;s look at Jill.", 
    "So Jill will, again, hash to the same bucket as Chris.", 
    "What I do is, I replace this list, or, actually, I append to this list", 
    "another element.", 
    "And that element is the tuple Jill, Smith.", 
    "Now, what happens when I want to do a look up?", 
    "If I look up Eric, I&#39;ll hash him to this bucket.", 
    "I&#39;ll go there, and I&#39;ll check that yes, that key and", 
    "that key are the same.", 
    "And I&#39;ll return Grimson.", 
    "What happens when I look up Jill?", 
    "I&#39;ll come to this bucket.", 
    "And I now go through this list one element at a time.", 
    "I compare Jill to the key Chris, say, nope that&#39;s not the tuple I want.", 
    "I then compare Jill to Jill and say, ah ha, that is a tuple I want, and I", 
    "return Smith.", 
    "So now you see why we were a little wishy-washy, and we always said near", 
    "constant time.", 
    "Because, as you can see, if the table is small, and I insert many, many", 
    "elements in it, then that hash buckets could get very long.", 
    "So for example, if I have a table with only 1 element, and I insert 1,000", 
    "names, then that one bucket will be 1,000 names long, and I&#39;m reduced to", 
    "linear search.", 
    "What we have here is a classic example of what&#39;s called a", 
    "time-space trade off.", 
    "If I make the table large, then I will have few collisions and look up will", 
    "be very fast.", 
    "I make the table small, relative to the number of elements I put in the", 
    "table, there will be more collisions.", 
    "That finished my explanation of how hash tables work.", 
    "We&#39;ll give you some code that you can run to play with and", 
    "see how they work.", 
    "And in the next segment, we&#39;ll spend just a few minutes at the start of it", 
    "using some probability to try and understand what is the", 
    "likelihood of a collision."
  ]
}